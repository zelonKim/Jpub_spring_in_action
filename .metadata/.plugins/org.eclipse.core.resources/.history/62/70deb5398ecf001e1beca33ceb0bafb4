package tacos.data;

import java.sql.Timestamp;

import java.sql.Types;
import java.util.Arrays;
import java.util.Date;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import tacos.Ingredient;
import tacos.Taco;


@Repository
public class JdbcOrderRepository implements OrderRepository {
	
	private JdbcTemplate jdbc;
	
	public JdbcOrderRepository(JdbcTemplate jdbc) {
		this.jdbc = jdbc;
	}
	
	
	@Override
	public Taco save(Taco taco) {
		long tacoId = saveTacoInfo(taco);
		
		taco.setId(tacoId);
		
		for (Ingredient ingredient : taco.getIngredients()) {
			saveIngredientToTaco(ingredient, tacoId);
		}
		
		return taco;
	}
	
	
	
	private long saveTacoInfo(Taco taco) { // Taco 테이블에 각 식자재를 저장하는 메서드
		taco.setCreatedAt(new Date());
		
		PreparedStatementCreator psc = new PreparedStatementCreatorFactory( 
				"insert into Taco (name, createdAt) values (?, ?)",
				Types.VARCHAR, 
				Types.TIMESTAMP)
					.newPreparedStatementCreator(
						Arrays.asList(taco.getName(), new Timestamp(taco.getCreatedAt().getTime()))
					); // new PreparedStatementCreatorFactory("실행할 SQL명령", 쿼리매개변수?의 타입).newPreparedStatementCreator(쿼리매개변수?의 값)
		
		
		KeyHolder keyHolder = new GeneratedKeyHolder(); // 생성된 타코 id를 제공함.
		
		jdbc.update(psc, keyHolder); // JdbcTemplate.update(PreparedStatementCreator객체, KeyHolder객체)
		
		return keyHolder.getKey().longValue(); // 타코 id를 반환함.
	}
	
	
	
	
	private void saveIngredientToTaco(Ingredient ingredient, long tacoId) { // 타코와 식자재의 연관 정보를 저장하는 메서드
		jdbc.update(
				"insert into Taco_Ingredients (taco, ingredient)" + "values(?, ?)",
				tacoId,
				ingredient.getId());
	}
	
	
}
